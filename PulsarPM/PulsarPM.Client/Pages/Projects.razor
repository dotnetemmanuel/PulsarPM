@page "/projects"
@using System.Data
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using PulsarPM.Client.Layout
@using PulsarPM.Client.Services
@using Shared
@inject IProjectService ProjectService
@inject ProjectStateService ProjectStateService
@inject NavigationManager NavigationManager
@rendermode InteractiveAuto

<h3>Projects</h3>
<MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" OnClick="ToggleForm">New project
</MudButton>
<br>
<br>
@if (_isFormVisible)
{

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                    <MudTextField @bind-Value="_projectName" T="string" Label="Name" Required="true"
                                  RequiredError="Project name is required!"/>

                    <div class="d-flex align-center justify-space-between">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                                   Class="ml-auto" OnClick="CreateProjectAsync">
                            Create Project
                        </MudButton>
                    </div>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
}

@if (_isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}
else
{
    @foreach (var project in _projects)
    {
        <h6>@project.Name
            <MudIconButton OnClick="@(() => NavigationManager.NavigateTo($"/board/{project.Id}"))"
                           Icon="@Icons.Material.Outlined.OpenInNew"
                           Color="Color.Primary"/>
                                        
            <MudIconButton OnClick="@(() => DeleteProjectAsync(project))" Icon="@Icons.Material.Outlined.Delete"
                           Color="Color.Error"/>
        </h6>
    }
}

@code {

    [Parameter]
    public NavMenu NavMenu { get; set; } = default!;

    [Parameter]
    public EventCallback OnProjectAdded { get; set; }

    private bool _success;
    private bool _isFormVisible;
    private bool _isLoading = true;
    private string _projectName = string.Empty;
    private string? _error;

    private List<ProjectDTO> _projects = new();
    private string[]? _errors;

    private MudForm _form;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _projects = await ProjectService.GetProjectsAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ToggleForm()
    {
        _isFormVisible = !_isFormVisible;
    }

    private async Task CreateProjectAsync()
    {
        var projectDto = new ProjectDTO
        {
            Name = _projectName,
        };

        try
        {
            await ProjectService.CreateProjectAsync(projectDto);
            Console.WriteLine("Project added, notifying...");
            await ProjectStateService.NotifyProjectAddedAsync();

            _projectName = string.Empty;
            _form?.ResetAsync();
            _isFormVisible = false;

            await OnInitializedAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task DeleteProjectAsync(ProjectDTO projectDto)
    {
        try
        {
            await ProjectService.DeleteProjectAsync(projectDto);
            Console.WriteLine("Project added, notifying...");
            await ProjectStateService.NotifyProjectAddedAsync();
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
