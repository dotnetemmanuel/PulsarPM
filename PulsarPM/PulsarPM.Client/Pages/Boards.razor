@page "/board/{ProjectId:int}"
@using PulsarPM.Client.Services
@using Shared

@inject ProjectService ProjectService
@inject CardService CardService

@rendermode InteractiveAuto

@if (_isLoading)
{
  <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else
{
  <h3>@_projectDto.Name</h3>

  <MudDropContainer @ref="_mudDropContainer" T="CardDTO" Items="_cards"
                    ItemsSelector="@((item, dropzone) => item.Status == dropzone)"
                    ItemDropped="ItemUpdated" Class="w-100 h-100" CanDropClass="mud-border-success">
    <ChildContent>
      <MudDropContainer T="DropZone" Items="_zones" ItemsSelector="@((item, dropzone) => true)" Class="d-flex w-100">
        <ChildContent>
          @foreach (var zone in _zones)
          {
            <MudDropZone T="DropZone" AllowReorder="true" Class="flex-1 mud-background-gray pa-4 py-1 mx-2 rounded">
              <MudText Typo="Typo.h6">@zone.Name</MudText>
              <MudDropZone T="CardDTO" Identifier="@zone.Name" AllowReorder="true"
                           Class="d-flex flex-column gap-3 mud-background-light px-4 py-1 mt-2 rounded"/>
              @if (zone.Name == "Backlog")
              {
                <MudIconButton OnClick="ToggleForm" Icon="@Icons.Material.Outlined.Add" Color="Color.Primary">Add task
                </MudIconButton>
                @if (_isFormVisible)
                {
                  <br/>
                  <MudGrid>
                    <MudItem xs="12" sm="7">
                      <MudPaper Class="pa-4">
                        <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors">
                          <MudTextField @bind-Value="_cardName" T="string" Label="Name" Required="true"
                                        RequiredError="Project name is required!"/>
                          <MudTextField @bind-Value="_cardDescription" T="string" Label="Description"/>
                          @* <MudTextField @bind-Value="_cardStatus" T="string" Label="Status"/> *@
                          @* <MudTextField @bind-Value="_cardColor" T="string" Label="Color"/> *@
                          @* <MudTextField @bind-Value="_projectId" T="int" Label="Project Id"/> *@
                          <div class="d-flex align-center justify-space-between">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)"
                                       Class="ml-auto" OnClick="CreateCardAsync">
                              Register
                            </MudButton>
                          </div>
                        </MudForm>
                      </MudPaper>
                    </MudItem>
                  </MudGrid>

                }
              }
            </MudDropZone>
          }
        </ChildContent>
      </MudDropContainer>
    </ChildContent>

    <ItemRenderer>
      @* Card rendering inside drop zones *@
      <MudPaper Class="pa-4 my-1">
        <MudText>@context.Name</MudText>
        <MudText>@context.Description</MudText>
        <MudIconButton OnClick="@(() => ToggleEditForm(@context))" Icon="@Icons.Material.Outlined.Edit"
                       Color="Color.Error"/>
        <MudIconButton OnClick="@(() => DeleteCardAsync(@context))" Icon="@Icons.Material.Outlined.Delete"
                       Color="Color.Error"/>

        @if (_editingCard == context)
        {
          <br>
          <MudGrid>
            <MudItem xs="12" sm="7">
              <MudPaper Class="pa-4">
                <MudForm @ref="_editForm" @bind-IsValid="@_success" @bind-Errors="@_errors">
                  <MudTextField @bind-Value="_cardName" T="string" Label="Name" Required="true"
                                RequiredError="Project name is required!"/>
                  <MudTextField @bind-Value="_cardDescription" T="string" Label="Description"/>
                  @* <MudTextField @bind-Value="_cardStatus" T="string" Label="Status"/> *@
                  @* <MudTextField @bind-Value="_cardColor" T="string" Label="Color"/> *@
                  @* <MudTextField @bind-Value="_projectId" T="int" Label="Project Id"/> *@
                  <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                               Class="ml-auto" OnClick="@(() => UpdateCardAsync(@context))">
                      Register
                    </MudButton>
                  </div>
                </MudForm>
              </MudPaper>
            </MudItem>
          </MudGrid>
        }

      </MudPaper>
    </ItemRenderer>

  </MudDropContainer>
}



@code {

  [Parameter]
  public int ProjectId { get; set; }

  private bool _success;
  private bool _isFormVisible;
  private bool _isEditFormVisible = false;
  private bool _isLoading = true;

  private string? _error;

  //card
  private string _cardName = string.Empty;
  private string _cardDescription = string.Empty;
  private string _cardColor = string.Empty;
  private string _cardStatus = string.Empty;
  private CardDTO _editingCard;

  private ProjectDTO _projectDto = new();
  private List<CardDTO> _cards = new();

  private string[] _errors;
  private MudForm _form;
  private MudForm _editForm;
  private MudDropContainer<CardDTO> _mudDropContainer;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      await GetProjectById();
      Console.WriteLine("Cards count: " + _cards.Count);

    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
    finally
    {
      _isLoading = false;
    }
  }

  // DRAG AND DROP
  private async Task ItemUpdated(MudItemDropInfo<CardDTO> card)
  {
    // card.Item.Status = card.DropzoneIdentifier;

    Console.WriteLine(card.Item.Name);
    Console.WriteLine(card.Item.Description);
    Console.WriteLine(card.Item.Color);
    Console.WriteLine(card.Item.Status);
    Console.WriteLine(card.Item.ProjectId);

    var updatedCard = new CardDTO
    {
      Id = card.Item.Id,
      Name = card.Item.Name,
      Description = card.Item.Description,
      Status = card.DropzoneIdentifier,
      Color = card.Item.Color,
      ProjectId = card.Item.ProjectId
    };

    await CardService.UpdateCardAsync(updatedCard);
    var existingCard = _cards.FirstOrDefault(c => c.Id == updatedCard.Id);
    existingCard.Status = card.DropzoneIdentifier;

    _mudDropContainer.Refresh();
  }



  public async Task UpdateCardAsync(CardDTO cardDto)
  {
    try
    {
      cardDto.Name = _cardName;
      cardDto.Description = _cardDescription;

      await CardService.UpdateCardAsync(cardDto);

      _editingCard = null;

      _cardName = string.Empty;  // Clear form fields
      _cardDescription = string.Empty;
      _cardColor = string.Empty;
      _cardStatus = string.Empty;

      _form?.ResetAsync();  // Reset form validation state

      _mudDropContainer.Refresh();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  private List<DropZone> _zones = new()
  {
    new()
    {
      Name = "Done"
    },
    new()
    {
      Name = "Testing"
    },
    new()
    {
      Name = "In Progress"
    },
    new()
    {
      Name = "Backlog"
    }
  };

  // private List<CardDTO> _cards = new()
  // {
  //   new CardDTO()
  //   {
  //     Name = "Drag me!",
  //     Status = "Done"
  //   },
  //   new CardDTO()
  //   {
  //     Name = "Or me!",
  //     Status = "Testing"
  //   },
  //   new CardDTO()
  //   {
  //     Name = "Just Mud",
  //     Status = "In Progress"
  //   },
  //   new CardDTO()
  //   {
  //     Name = "Just bud",
  //     Status = "Backlog"
  //   },
  // };

  private void ToggleForm()
  {
    _isFormVisible = !_isFormVisible;
  }

  private void ToggleEditForm(CardDTO cardDto)
  {
    if (_editingCard == cardDto)
    {
      Console.WriteLine("Closing the edit form.");

      // If the same card is clicked again, close the form
      _editingCard = null;
    }
    else
    {
      Console.WriteLine($"Editing card: {cardDto?.Name}");
      _editingCard = cardDto;
      _cardName = cardDto?.Name ?? string.Empty;
      _cardDescription = cardDto?.Description ?? string.Empty;
    }
    _mudDropContainer.Refresh();
  }

  private async Task GetProjectById()
  {
    _projectDto = await ProjectService.GetProjectByIdAsync(ProjectId);
    _cards = await CardService.GetCardFromProjectAsync(_projectDto.Id);
  }

  private async Task CreateCardAsync()
  {
    var cardDto = new CardDTO
    {
      Name = _cardName,
      Description = _cardDescription,
      Status = "Backlog",
      Color = "blue",
      ProjectId = _projectDto.Id
    };

    try
    {
      var createdCard = await CardService.CreateCardAsync(cardDto);
      _cards = new List<CardDTO>(_cards)
      {
        createdCard
      };

      _cardName = string.Empty;
      _cardDescription = string.Empty;
      _form?.ResetAsync();
      _isFormVisible = false;

      _mudDropContainer.Refresh();
      // StateHasChanged();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  private async Task DeleteCardAsync(CardDTO cardDto)
  {
    try
    {
      await CardService.DeleteCardAsync(cardDto);
      _cards.Remove(cardDto);

      _mudDropContainer.Refresh();
      // StateHasChanged();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  // Temporary class
  private class DropZone
  {
    public string Name { get; init; }
  }

}
