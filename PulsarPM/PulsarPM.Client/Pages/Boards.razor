@page "/board/{ProjectId:int}"
@using PulsarPM.Client.Services
@using Shared

@inject ProjectService ProjectService

@rendermode InteractiveAuto

<h3>@_projectDto.Name</h3>

<MudDropContainer T="CardDTO" Items="_cards" ItemsSelector="@((item, dropzone) => item.Status == dropzone)" ItemDropped="ItemUpdated" Class="w-100 h-100">
  <ChildContent>
    <MudDropContainer T="DropZone" Items="_zones" ItemsSelector="@((item, dropzone) => true)" Class="d-flex w-100">
      <ChildContent>
        @foreach (var zone in _zones)
        {
          <MudDropZone T="DropZone" AllowReorder Class="flex-1 mud-background-gray px-4 py-1 mx-2 rounded">
            <MudText Typo="Typo.h6">@zone.Name</MudText>
            <MudDropZone T="CardDTO" Identifier="@zone.Name" AllowReorder Class="d-flex flex-column gap-3 mud-background-light px-4 py-1 mt-2 rounded" />
          </MudDropZone>
        }
      </ChildContent>
    </MudDropContainer>
  </ChildContent>

  <ItemRenderer>
    @* Card rendering inside drop zones *@
    <MudPaper Class="pa-4 my-4">
      <MudText>@context.Name</MudText>
    </MudPaper>
  </ItemRenderer>

</MudDropContainer>

<br>
<br>

@code {
  [Parameter]
  public int ProjectId { get; set; }

  private bool _success;
  private bool _isFormVisible;
  private bool _isLoading = true;
  private string _boardName = string.Empty;
  private string? _error;
  private ProjectDTO _projectDto;

  private string[] _errors;
  private MudForm _form;

  protected override async Task OnInitializedAsync()
  {
    await GetProjectById();
    _isLoading = false;
  }

  // DRAG AND DROP
  private void ItemUpdated(MudItemDropInfo<CardDTO> card)
  {
    card.Item.Status = card.DropzoneIdentifier;
  }

  private List<DropZone> _zones = new()
  {
    new() { Name = "Done" },
    new() { Name = "Testing" },
    new() { Name = "In Progress" },
    new() { Name = "Backlog" }
  };

  private List<CardDTO> _cards = new()
  {
    new CardDTO() { Name = "Drag me!", Status = "Done" },
    new CardDTO() { Name = "Or me!", Status = "Testing" },
    new CardDTO() { Name = "Just Mud", Status = "In Progress" },
    new CardDTO() { Name = "Just bud", Status = "Backlog" },
  };

  private void ToggleForm()
  {
    _isFormVisible = !_isFormVisible;
  }

  private async Task GetProjectById()
  {
    _projectDto = await ProjectService.GetProjectByIdAsync(ProjectId);
  }

  // Temporary class
  private class DropZone
  {
    public string Name { get; init; }
  }
}
