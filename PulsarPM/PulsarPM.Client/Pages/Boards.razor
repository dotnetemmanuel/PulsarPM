@page "/board/{ProjectId:int}"
@using PulsarPM.Client.Services
@using Shared

@inject ProjectService ProjectService
@inject CardService CardService

@rendermode InteractiveAuto

@if (_isLoading)
{
  <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else
{
  <h3>@_projectDto.Name</h3>


  @* <MudDropContainer @ref="_mudDropContainer" T="CardDTO" Items="_cards.OrderBy(c => c.Order)" *@
  @*                   ItemsSelector="@((item, dropzone) => item.Status == dropzone)" *@
  @*                   ItemDropped="ItemUpdated" Class="w-100 h-100" CanDropClass="mud-border-success"> *@
  @*   <ChildContent> *@
  @*     <MudDropContainer T="DropZone" Items="_zones" ItemsSelector="@((item, dropzone) => true)" Class="d-flex w-100"> *@
  @*       <ChildContent> *@
  @*         @foreach (var zone in _zones) *@
  @*         { *@
  @*           <MudDropZone T="DropZone" AllowReorder="true" Class="flex-1 mud-background-gray pa-4 py-1 mx-2 rounded"> *@
  @*             <MudText Typo="Typo.h6">@zone.Name</MudText> *@
  @*             <MudDropZone T="CardDTO" Identifier="@zone.Name" AllowReorder="true" *@
  @*                          Class="d-flex flex-column gap-3 mud-background-light px-4 py-1 mt-2 rounded"/> *@
  @*             @if (zone.Name == "Backlog") *@
  @*             { *@
  @*               <MudIconButton OnClick="ToggleForm" Icon="@Icons.Material.Outlined.Add" Color="Color.Primary">Add task *@
  @*               </MudIconButton> *@
  @*               @if (_isFormVisible) *@
  @*               { *@
  @*                 <br/> *@
  @*                 <MudGrid> *@
  @*                   <MudItem xs="12" sm="7"> *@
  @*                     <MudPaper Class="pa-4"> *@
  @*                       <MudForm @ref="_form" @bind-IsValid="@_success" @bind-Errors="@_errors"> *@
  @*                         <MudTextField @bind-Value="_cardName" T="string" Label="Name" Required="true" *@
  @*                                       RequiredError="Project name is required!"/> *@
  @*                         <MudTextField @bind-Value="_cardDescription" T="string" Label="Description"/> *@
  @*                         $1$ <MudTextField @bind-Value="_cardStatus" T="string" Label="Status"/> #1# *@
  @*                         $1$ <MudTextField @bind-Value="_cardColor" T="string" Label="Color"/> #1# *@
  @*                         $1$ <MudTextField @bind-Value="_projectId" T="int" Label="Project Id"/> #1# *@
  @*                         <div class="d-flex align-center justify-space-between"> *@
  @*                           <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!_success)" *@
  @*                                      Class="ml-auto" OnClick="CreateCardAsync"> *@
  @*                             Register *@
  @*                           </MudButton> *@
  @*                         </div> *@
  @*                       </MudForm> *@
  @*                     </MudPaper> *@
  @*                   </MudItem> *@
  @*                 </MudGrid> *@
  @* *@
  @*               } *@
  @*             } *@
  @*           </MudDropZone> *@
  @*         } *@
  @*       </ChildContent> *@
  @*     </MudDropContainer> *@
  @*   </ChildContent> *@
  @* *@
  @*   <ItemRenderer> *@
  @*     $1$ Card rendering inside drop zones #1# *@
  @*     <MudPaper Class="pa-4 my-1"> *@
  @*       <MudText>@context.Name</MudText> *@
  @*       <MudText>@context.Description</MudText> *@
  @*       <MudIconButton OnClick="@(() => ToggleEditForm(@context))" Icon="@Icons.Material.Outlined.Edit" *@
  @*                      Color="Color.Error"/> *@
  @*       <MudIconButton OnClick="@(() => DeleteCardAsync(@context))" Icon="@Icons.Material.Outlined.Delete" *@
  @*                      Color="Color.Error"/> *@
  @* *@
  @*       @if (_editingCard == context) *@
  @*       { *@
  @*         <br> *@
  @*         <MudGrid> *@
  @*           <MudItem xs="12" sm="7"> *@
  @*             <MudPaper Class="pa-4"> *@
  @*               <MudForm @ref="_editForm" @bind-IsValid="@_success" @bind-Errors="@_errors"> *@
  @*                 <MudTextField @bind-Value="_cardName" T="string" Label="Name" Required="true" *@
  @*                               RequiredError="Project name is required!"/> *@
  @*                 <MudTextField @bind-Value="_cardDescription" T="string" Label="Description"/> *@
  @*                 $1$ <MudTextField @bind-Value="_cardStatus" T="string" Label="Status"/> #1# *@
  @*                 $1$ <MudTextField @bind-Value="_cardColor" T="string" Label="Color"/> #1# *@
  @*                 $1$ <MudTextField @bind-Value="_projectId" T="int" Label="Project Id"/> #1# *@
  @*                 <div class="d-flex align-center justify-space-between"> *@
  @*                   <MudButton Variant="Variant.Filled" Color="Color.Primary" *@
  @*                              Class="ml-auto" OnClick="@(() => UpdateCardAsync(@context))"> *@
  @*                     Register *@
  @*                   </MudButton> *@
  @*                 </div> *@
  @*               </MudForm> *@
  @*             </MudPaper> *@
  @*           </MudItem> *@
  @*         </MudGrid> *@
  @*       } *@
  @* *@
  @*     </MudPaper> *@
  @*   </ItemRenderer> *@
  @* *@
  @* </MudDropContainer> *@


  <MudDropContainer T="CardDTO" @ref="_mudDropContainer" Items="@_cards"
                    ItemsSelector="@((item, column) => item.Status == column)" ItemDropped="ItemUpdated"
                    Class="d-flex flex-row">
    <ChildContent>
      @foreach (var item in _zones)
      {
        <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column  rounded-lg">
          <MudToolBar Gutters="false">
            <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
            <MudSpacer/>
            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight"
                     TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column"
                     PopoverClass="mud-elevation-25">
              @* <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteSection(item))">Delete Section</MudButton> *@
              <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename
                Section
              </MudButton>
            </MudMenu>
          </MudToolBar>
          <MudDropZone T="CardDTO" Identifier="@item.Name" Class="mud-height-full" AllowReorder="true"/>
          @if (!_isFormVisible && item.Name == "Backlog")
          {
            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
              <MudTextField @bind-Value="_cardName" T="string" Label="Name" Required="true"
                            RequiredError="Project name is required!"/>
              <MudTextField @bind-Value="_cardDescription" T="string" Label="Description"/>
              <MudButton OnClick="@(CreateCardAsync)" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add
                Card
              </MudButton>
            </MudPaper>
          }

        </MudPaper>
      }
      <MudPaper Class="pa-4" Elevation="0" Width="224px">
        @* @if (_addSectionOpen) *@
        @* { *@
        @*     <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg"> *@
        @*         <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit"> *@
        @*             <DataAnnotationsValidator/> *@
        @*             <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Section" Underline="false"></MudTextField> *@
        @*             <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Section</MudButton> *@
        @*         </EditForm> *@
        @*     </MudPaper> *@
        @* } *@
        @* else *@
        @* { *@
        @*     <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Section</MudButton> *@
        @* } *@
      </MudPaper>
    </ChildContent>
    <ItemRenderer>
      <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
    </ItemRenderer>
  </MudDropContainer>

}



@code {


  [Parameter]
  public int ProjectId { get; set; }

  private bool _success;
  private bool _isFormVisible;
  private bool _isEditFormVisible = false;
  private bool _isLoading = true;

  private string? _error;

  //card
  private string _cardName = string.Empty;
  private string _cardDescription = string.Empty;
  private string _cardColor = string.Empty;
  private string _cardStatus = string.Empty;
  private CardDTO _editingCard;

  private ProjectDTO _projectDto = new();
  private List<CardDTO> _cards = new();

  private string[] _errors;
  private MudForm _form;
  private MudForm _editForm;
  private MudDropContainer<CardDTO> _mudDropContainer;

  protected override async Task OnInitializedAsync()
  {
    try
    {
      await GetProjectById();
      Console.WriteLine("Cards count: " + _cards.Count);

    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
    finally
    {
      _isLoading = false;
    }
  }


  private List<DropZone> _zones = new()
  {
    new()
    {
      Name = "Done"
    },
    new()
    {
      Name = "Testing"
    },
    new()
    {
      Name = "In Progress"
    },
    new()
    {
      Name = "Backlog"
    }
  };

  private void ToggleForm()
  {
    _isFormVisible = !_isFormVisible;
  }

  private void ToggleEditForm(CardDTO cardDto)
  {
    if (_editingCard == cardDto)
    {
      Console.WriteLine("Closing the edit form.");

      // If the same card is clicked again, close the form
      _editingCard = null;
    }
    else
    {
      Console.WriteLine($"Editing card: {cardDto?.Name}");
      _editingCard = cardDto;
      _cardName = cardDto?.Name ?? string.Empty;
      _cardDescription = cardDto?.Description ?? string.Empty;
    }
    _mudDropContainer.Refresh();
  }

  private async Task GetProjectById()
  {
    _projectDto = await ProjectService.GetProjectByIdAsync(ProjectId);
    _cards = await CardService.GetCardFromProjectAsync(_projectDto.Id);
  }

  private async Task CreateCardAsync()
  {
    var cardCount = _cards
      .Where(c => c.Status == "Backlog")
      .Select(c => c.Order)
      .DefaultIfEmpty(0)
      .Max();

    var cardDto = new CardDTO
    {
      Name = _cardName,
      Description = _cardDescription,
      Status = "Backlog",
      Color = "blue",
      ProjectId = _projectDto.Id,
      //Order is set depending on number of cards in Backlog +1
      Order = cardCount + 1
    };

    try
    {
      var createdCard = await CardService.CreateCardAsync(cardDto);
      _cards.Add(createdCard);

      _cardName = string.Empty;
      _cardDescription = string.Empty;
      _form?.ResetAsync();
      _isFormVisible = false;

      _mudDropContainer.Refresh();
      StateHasChanged();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  // DRAG AND DROP
  private async Task ItemUpdated(MudItemDropInfo<CardDTO> card)
  {
    if (card.Item.Status != card.DropzoneIdentifier)
    {
      card.Item.Status = card.DropzoneIdentifier;
    }
    card.Item.Order = card.IndexInZone;

    // Console.WriteLine(card.Item.Name);
    // Console.WriteLine(card.Item.Description);
    // Console.WriteLine(card.Item.Color);
    // Console.WriteLine(card.Item.Status);
    // Console.WriteLine(card.Item.ProjectId);
    _cards.Remove(card.Item);
    _cards.Insert(card.IndexInZone, card.Item);
    Console.WriteLine($"Item {card.Item.Name} moved to index {card.IndexInZone} in zone {card.DropzoneIdentifier}");

    // var updatedCard = new CardDTO
    // {
    //   Id = card.Item.Id,
    //   Name = card.Item.Name,
    //   Description = card.Item.Description,
    //   Status = card.DropzoneIdentifier,
    //   Color = card.Item.Color,
    //   ProjectId = card.Item.ProjectId,
    //   Order = card.IndexInZone
    // };
    //
    // await CardService.UpdateCardAsync(updatedCard);

    for (int i = 0; i < _cards.Count; i++)
    {
      _cards[i].Order = i;

      await CardService.UpdateCardAsync(_cards[i]);
    }

    // var cardsInZone = _cards
    //   .Where(c => c.Status == card.DropzoneIdentifier)
    //   .OrderBy(c => c.Order)
    //   .ToList();
    //
    // int newOrder;
    //
    // if (card.IndexInZone >= cardsInZone.Count)
    // {
    //   // Dropping at the end
    //   newOrder = cardsInZone.Any()
    //     ? cardsInZone.Max(c => c.Order) + 1
    //     : 0;
    // }
    // else
    // {
    //   // Dropping between items
    //   var targetCard = cardsInZone[card.IndexInZone];
    //   newOrder = targetCard.Order;
    //   if (card.Item.Order < newOrder)
    //   {
    //     targetCard.Order--;
    //     await CardService.UpdateCardAsync(targetCard);
    //
    //     // Update any cards that have the same order as the target
    //     var cardsToUpdate = cardsInZone.Where(c =>
    //       c.Order == targetCard.Order &&
    //       c.Id != targetCard.Id &&
    //       c.Id != card.Item.Id);
    //
    //     foreach (var c in cardsToUpdate)
    //     {
    //       c.Order--;
    //       await CardService.UpdateCardAsync(c);
    //     }
    //   }
    // }
    //
    //
    // var updatedCard = new CardDTO
    // {
    //   Id = card.Item.Id,
    //   Name = card.Item.Name,
    //   Description = card.Item.Description,
    //   Status = card.DropzoneIdentifier,
    //   Color = card.Item.Color,
    //   ProjectId = card.Item.ProjectId,
    //   Order = newOrder
    // };
    //
    // await CardService.UpdateCardAsync(updatedCard);
    //
    // var index = _cards.FindIndex(c => c.Id == updatedCard.Id);
    // if (index != -1)
    // {
    //   _cards[index] = updatedCard;
    // }

    // _cards = new List<CardDTO>(_cards);
    _mudDropContainer.Refresh();
    StateHasChanged();
  }

  public async Task UpdateCardAsync(CardDTO cardDto)
  {
    try
    {
      cardDto.Name = _cardName;
      cardDto.Description = _cardDescription;

      await CardService.UpdateCardAsync(cardDto);

      _editingCard = null;

      _cardName = string.Empty;// Clear form fields
      _cardDescription = string.Empty;
      _cardColor = string.Empty;
      _cardStatus = string.Empty;

      _form?.ResetAsync();// Reset form validation state

      _mudDropContainer.Refresh();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  private async Task DeleteCardAsync(CardDTO cardDto)
  {
    try
    {
      await CardService.DeleteCardAsync(cardDto);
      _cards.Remove(cardDto);

      _mudDropContainer.Refresh();
      // StateHasChanged();
    }
    catch (Exception ex)
    {
      _error = ex.Message;
    }
  }

  // Temporary class
  private class DropZone
  {
    public string Name { get; init; }
  }

}
